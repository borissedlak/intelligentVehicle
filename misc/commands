1.) Clone project
--------------------
mkdir development
git clone http://github.com/borissedlak/intelligentVehicle

2.) Set Env Variables
--------------------
sudo apt install nano
sudo nano /etc/environment
PYTHONPATH=/home/jetson/development/intelligentVehicle
DEVICE_NAME=NX//AGX
source /etc/environment

X.) Install Python3.10
--------------------
XX sudo add-apt-repository ppa:deadsnakes/ppa
XX sudo apt install python3.10
XX sudo apt install python3.10-distutils
XX curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10

3.) Install CUDA (if missing)
--------------------
sudo apt-get install nvidia-cuda
sudo apt-get install nvidia-jetpack
sudo apt-get install libopenblas-dev
nvcc --version

4.) Install package dependencies
--------------------
pip install -r requirements.txt
pip install ./misc/onnxruntime_gpu-1.16.0-cp38-cp38-linux_aarch64.whl --force-reinstall
pip install ./torch-2.1.0a0+41361538.nv23.06-cp38-cp38-linux_aarch64.whl --force-reinstall

pip install -r requirements_3_10.txt
pip install ./misc/onnxruntime_gpu-1.17.0-cp310-cp310-linux_aarch64.whl --force-reinstall
pip install ./torch-2.3.0-cp310-cp310-linux_aarch64.whl --force-reinstall

5.) Before running
--------------------
cd orchestration/models
python3 ./model_trainer.py
cp dataset to /services/LI

--------------------------------------------------------------------------

ffmpeg -y -ss 00:00:00 -to 00:00:10 -i original.mp4 -c copy original_cut.mp4

sudo service mosquitto stop
mosquitto -c mosquitto.conf
http://delock-3259.local/

sudo apt install python3-pydot graphviz
docker buildx build -t basta55/workload --platform linux/arm64 --load .
docker buildx build -t basta55/workload-gpu:latest -f ./DockerfileGPU --platform linux/arm64 --load .
docker cp eloquent_davinci:/data/ $HOME/

120p = 25440
180p = 57600
240p = 102240
360p = 230400
480p = 409920
720p = 921600

# For Docker configuration
"dns": [
    "8.8.8.8",
    "8.8.4.4"
  ],

export VARNAME="my value"
sudo nano /etc/environment
# Add at the end of the file without export
source /etc/environment
export PYTHONPATH=/home/orinagx/development/intelligentVehicle

mongodb+srv://test:<pw>@cluster0.rqaj0m9.mongodb.net/
mongodb://localhost:27017/
mongodb://192.168.31.19:27017/

/home/boris/development/intelligentVehicle/misc/prometheus.yml
/etc/prometheus/prometheus.yml

docker run -d \
  --name=prometheus \
  -p 9090:9090 \
  -v /home/boris/development/intelligentVehicle/misc/prometheus.yml:/etc/prometheus/prometheus.yml \
  prom/prometheus \
  --config.file=/etc/prometheus/prometheus.yml \
  --web.enable-admin-api

docker run -d \
  --name=node-exporter \
  -p 9100:9100 \
  prom/node-exporter

docker run -d \
  --name=mongoDB \
  -p 27017:27017 \
  -v /home/boris/development/intelligentVehicle/misc/mongod.conf:/etc/mongod.conf \
  mongo \
  --config=/etc/mongod.conf


-------------------------------------------------------------

#Set network up/down
sudo ip link set wlan0_ibss up

#Connect or create to a p2p network with frequency 2462 = channel 11, 2472 = 13
sudo iw dev wlan0 ibss join JetsonAdhocNetwork 2462
sudo ifconfig wlan0 192.168.1.1 netmask 255.255.255.0 up
sudo ip addr add 192.168.1.1/24 dev wlan0

#Show current configuration of a network
ip link show wlan0_ibss
sudo iw dev wlan0_ibss info

#Connect to a wifi through NetworkManager
sudo nmcli device wifi connect "AD222-global" password "xiaoboqu"

#Start NetworkManager, set network unmanaged for NetworkManager
sudo systemctl start NetworkManager
sudo nmcli dev set wlan0 managed no

#remove and add wlan in ibss mode, set for existing (down!)
sudo iw dev wlan0_ibss del
sudo iw dev wlan0 interface add wlan0_ibss type ibss
sudo iw dev wlan0 set type ibss

#Flush routes and add new for local network
sudo ip addr flush dev wlan0
sudo ip route add 192.168.1.0/24 dev wlan0
ip route show

#Check network throughput
iperf3 -s
iperf3 -c ip.address
